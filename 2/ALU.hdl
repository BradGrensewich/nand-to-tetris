/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //zeroing
    Not(in=zx , out=notzx );
    And16(a[0]=notzx,a[1]=notzx,a[2]=notzx,a[3]=notzx,a[4]=notzx,a[5]=notzx,a[6]=notzx,a[7]=notzx,a[8]=notzx,a[9]=notzx,a[10]=notzx,a[11]=notzx,a[12]=notzx,a[13]=notzx,a[14]=notzx,a[15]=notzx, b=x , out=x1 );
    Not(in=zy , out=notzy );
    And16(a[0]=notzy,a[1]=notzy,a[2]=notzy,a[3]=notzy,a[4]=notzy,a[5]=notzy,a[6]=notzy,a[7]=notzy,a[8]=notzy,a[9]=notzy,a[10]=notzy,a[11]=notzy,a[12]=notzy,a[13]=notzy,a[14]=notzy,a[15]=notzy , b=y , out=y1 );

    //negating
    Not16(in=x1 , out=notx1 );
    Not16(in=y1 , out=noty1 );
    Mux16(a=x1 , b=notx1 , sel=nx , out=x2 );
    Mux16(a=y1 , b=noty1 , sel=ny , out=y2 );

    //applying function
    Add16(a=x2 , b=y2 , out=xplusy );
    And16(a=x2 , b=y2 , out=xandy );
    Mux16(a=xandy , b=xplusy , sel=f , out=fxy );

    ///negating answer
    Not16(in=fxy , out=notfxy );
    Mux16(a=fxy , b=notfxy , sel=no , 
    out=out, out[15]=ng, out[0..7]=result1, out[8..15]=result2 );

    //finding zero output
    Or8Way(in=result1 , out=or1 );
    Or8Way(in=result2 , out=or2 );
    Or(a=or1 , b=or2 , out=notzr );
    Not(in=notzr , out=zr );    
}